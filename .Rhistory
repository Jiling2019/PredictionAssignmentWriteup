install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
33/36
deck
1/52
52
4/52
1
0
12/52
2/51
0.64
0.64
mypdf
integrate(mypdf)
integrate(mypdf,lower=0,upper = 1.6)
0.5
1
2^1/2
2^(1/2)
0.997*0.001
1-0.997*0.001
0.003*0.999
(1-0.997)*(1-0.001)
(1-0.985)*(1-0.001)
0.000997 /( 0.000997+0.014985)
(1=2=3=4=5=6)/6
(1+2+3+4+5+6)/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5 *( edh+edl )
integrate(x*(t/2))
integrate(x*(x/2))
integrate(x^2/2,lower = 1,upper = 2)
integrate(myfunc,lower = 1,upper = 2)
integrate(myfunc,lower = 0,upper = 2)
spop
mean(spop)
allsam
apply(allsame, 1,mean)
apply(allsam, 1,mean)
mean(smeans)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp[1,]*temp[2,])
0.75*0.3
0.225/(0.225+(0.48*0.7)
)
0.225/(0.225+0.48*0.7)
rnorm()
?rnorm()
m <-1:20
matrix(m, 2)
swirl()
dice_sqr
ex2_fair <-sum(dice_sqr * PDF)
ex2_fair <-sum(dice_sqr * c(dice_fair, dice_high,and dice_low))
ex2_fair <-sum(dice_sqr * dice_fair)
ex2_fair-3.5^-2
ex2_fair-3.5^2
sum(dice_sqr * dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
.8^3 * (.2)^2
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,.8, lower.tail=F)
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
pbinom(1,size=5,prob=.8,lower.tail=FALSE)
pbinom(3,size=5,prob=.8,lower.tail=FALSE)
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
plot(pbinom(2,size=5,prob=.8,lower.tail=FALSE))
qnorm(.1)
0
qnorm(97.5,mean = 3, 2)
qnorm(.975,mean = 3, sd=2)
qnorm(.975,mean = 3, sd=2)
1.96*2 + 3
1.96*2 + 3
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
.53
ppois(3,2.5 * 4)
ppois(3,2.5 * 4)
pbinom(5,1000,.01)
ppois(5,10)
ppois(5,1000*.01)
n=10
coinPlot(10)
coinPlot(10000)
qnorm(.95)
qnorm(.95)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf
prompt(binom.test(60,100)$conf.int)
binom.test(60,100)$conf.int
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
ACCompar(20)
lamb <- 5/94.32
5/94.32 + c(-1,1)*qnorm(.975)*sqrt()
5/94.32 + c(-1,1)*qnorm(.975)*sqrt(1)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
pnorm(70,mean= 80, sd=10)
qnorm(.95,mean= 1100, sd=75)
qnorm(.95,mean= 1100, sd=7.5)
pbinom(3)
pbinom(3,size = 5)
pbinom(3,size = 5,prop=0.5)
pbinom(3,size = 5,prob=0.5)
ppois(16,mean=15,sd=1)
ppois(10,15)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <-g2-g1
mean(difference)
s <-sd(difference)
mn+c(-1,1)*qt(.975)*s/sqrt(10)
mn+c(-1,1)*qt(.975,df=9)*s/sqrt(10)
t.test(different)$conf.int
t.test(difference)$conf.int
(n_x-1)(S_x)^2+(n_y-1)(S_y)^2
7*132.86^2+20*127.44^2
sp <- 7*15.34^2 + 20*18.23^2
sp/27
sp/sqrt(27)
na <-27
na <-7+20
na <-8+21-2
ns <-8+21-2
sp/sqrt(ns)
sp <- sqrt(sp/ns)
mn + c(-1, 1) * qt(.975, 27) * sp
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
9*(sd(g1)^2+sd(g2)^2)/18
sp <- sqrt((9*var(g1)+9*var(g2))/18)
mean(g1)-mean(g2)+c(-1,1)*qt(.975,8)*sp*sqrt(1/8+1/21)
mean(g1)-mean(g2)+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2-g1,df=18,paired=FALSE,var.equal=TRUE)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)
t.test(g2,g1,paired=TRUE)$conf
(15.34/8 + 18.23/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
t.test(g2,g1,df=mydf,paired=FALSE,var.equal=FALSE)$conf
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
(32-30)/(10/sqrt(16))
15
qt(.975,15)
qt(.95,15)
fim(fs)
dim(fs)
t.test(fs$sheight,fs$fheight,df=1077)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.00390625
7
8
q()
swil()
swirl()
swirl()
pt(q=2.5, df=15)
pt(2.5, 15, lower.tail=FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,8,.5,lower.tail = F)
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail = F)
ppois(9,5,lower.tail=FALSE)
pt(.975,8)
1100+c(-1,1)*qt(.975)*30/sqrt(9)
1100+c(-1,1)*qt(.975,8)*30/sqrt(9)
1100+c(-1,1)*qt(.975,8)*30/sqrt()
2/qt(0.975,8)
2/qt(0.975,8)*sqrt(9)
-2+c(-1,1)*qt(.975,18)*sqrt(0.64/20)
-2+c(-1,1)*qt(.975,18)*sqrt(0.04/20)
-2+c(-1,1)*qt(.975,18)*sqrt(0.64/10)
-2+c(-1,1)*qt(.975,18)*sqrt(0.64/10)
-2+c(-1,1)*qt(.975,18)*sqrt(0.64)/sqrt(10)
-2+c(-1,1)*qt(.975,18)*sqrt(0.64)/sqrt(5)
2+c(-1,1)*qnorm(.975)*1.25/sqrt(50)
-4+c(-1,1)*qt(.95,16)*1.65/sqrt(2/9)
-4+c(-1,1)*qt(.95,16)*1.65*sqrt(2/9)
swirl90
swirl()
0
Q
q
q()
q(swirl)
no
q(no)
q("no")
setwd("~/Desktop/cousera/Lectures/MachineLearning")
setwd("~/Desktop/cousera/Lectures/MachineLearning/project")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile = "pml-traininig.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile = "pml-testing.csv")
library(rpart)
library(randomForest)
install.packages("randomForest")
training <- read.csv("pml-traininig.csv")
testing <- read.csv("pml-testing.csv")
str(training)
training <- read.csv("pml-traininig.csv",na.strings=c("NA","#DIV/0!",""))
testing <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
str(training)
training <-training[,colSums(is.na(training)) == 0]
testing <-testing[,colSums(is.na(testing)) == 0]
str(training)
str(testing)
traindata <- read.csv("pml-traininig.csv",na.strings=c("NA","#DIV/0!",""))
testdata <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
traindata <-traindata[,colSums(is.na(training)) == 0]
testdata <-testdata[,colSums(is.na(testing)) == 0]
traindata <-traindata[,colSums(is.na(traindata)) == 0]
testdata <-testdata[,colSums(is.na(testdata)) == 0]
nzv <- nearZeroVar(traindata)
library(caret)
nzv <- nearZeroVar(traindata)
nzv
nearZeroVar(traindata)
str(traindata[,-nzv])
traindata <- traindata[,-nzv]
traindata <- traindata[,-(1:6)]
set.seed(1234)
train  <- createDataPartition(traindata$classe, p=0.7, list=FALSE)
training <- traindata[train, ]
testing  <- traindata[-train, ]
install.packages("corrplot")
corrplot
library(corrplot)
cor <- abs(cor(traindata[,-53]))
corrplot(cor)
cor08 <- findCorrelation(cor, cutoff=0.8)
traindata <- traindata[, -cor08]
set.seed(1234)
train  <- createDataPartition(traindata$classe, p=0.7, list=FALSE)
training <- traindata[train, ]
testing  <- traindata[-train, ]
table(training$classe)
modfit <-train(classe~., data=training, method="rf")
modrf <-train(classe~., data=training, method="rf",prox=TRUE)
model.rf <- randomForest(classe ~ ., data=training)
library(randomForest)
model.rf <- randomForest(classe ~ ., data=training)
model.r
model.rf$predicted
predict.rf <- predict(model.rf, testing)
confusionMatrix(predict.rf, testing$classe)$overall
confusionMatrix(predict.rf, testing$classe)$Accuracy
model.rf$call
model.rf$type
model.rf$err.rate
model.rf$oob.times
model.rf$classes
model.rf$importanceSD
model.rf$proximity
model.rf$ntree
model.rf$mtry
model.rf$y
summurymodel.rf
summury(model.rf)
modrf <- randomForest(classe ~ ., data=training)
rm(model.rf)
rm(predict.rf)
predrf <- predict(modrf, testing)
rfAccuracy <-confusionMatrix(predrf, testing$classe)$overall[1]
rfAccuracy
library(rpart)
library(rpart.plot)
install.package("rpart.plot")
install.packages("rpart.plot")
modDT <- rpart(classe ~ ., data=training, method="class")
fancyRpartPlot(modFitDecTree)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFitDecTree)
fancyRpartPlot(modDT)
predDT <- predict(modDT, newdata=testing)
DecTreeAccuracy <- confusionMatrix(predDT, testing$classe)$overall[1]
DecTreeAccuracy
predDT <- predict(modDT, newdata=testing,type = "class")
DecTreeAccuracy <- confusionMatrix(predDT, testing$classe)$overall[1]
DecTreeAccuracy
confusionMatrix(predDT, testing$classe)$talbe
confusionMatrix(predDT, testing$classe)
x<-confusionMatrix(predDT, testing$classe)
x$table
modGBM  <- train(classe ~ ., data=training, method = "gbm", verbose = FALSE)
modGBM  <- train(classe ~ ., data=training, method = "gbm", verbose = FALSE,trControl =trainControl(method = "repeatedcv", number = 5, repeats = 1))
predGBN <- predict(modGBM, newdata=testing)
GBMAccuracy <- confusionMatrix(predGBM, testing$classe)$overall[1]
GBMAccuracy
GBMAccuracy <- confusionMatrix(predGBN, testing$classe)$overall[1]
GBMAccuracy
table(RandomForestsAccuracy,DecTreeAccuracy,GBMAccuracy,)
table(RandomForestsAccuracy,DecTreeAccuracy,GBMAccuracy)
RandomForestsAccuracy <- confusionMatrix(predrf, testing$classe)$overall[1]
table(RandomForestsAccuracy,DecTreeAccuracy,GBMAccuracy)
table(RandomForestsAccuracy,DecTreeAccuracy,GBMAccuracy)
round(RandomForestsAccuracy,2)
round(RandomForestsAccuracy,3)
round(confusionMatrix(predrf, testing$classe)$overall[1],3)
t <-data.frame(Model=c("RandomForest","DecisionTree","GradientBoostedModel"),Accuracy=c(RandomForestsAccuracy,DecTreeAccuracy,GBMAccuracy))
View(t)
t <-data.frame(Model=c("RandomForest","DecisionTree","GradientBoostedModel"),Accuracy=c(RandomForestsAccuracy,DecTreeAccuracy,GBMAccuracy),Error=1-Accuracy)
t$Error <-1-t$Accuracy
View(t)
View(t)
predTestdata <- predict(modrf, testdata)
predTestdata
library(knitr)
library(caret)
#Read data
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",destfile = "pml-traininig.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",destfile = "pml-testing.csv")
traindata <- read.csv("pml-traininig.csv",na.strings=c("NA","#DIV/0!",""))
testdata <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
#clean NA, near zero values, and ID variables
traindata <-traindata[,colSums(is.na(traindata)) == 0]
testdata <-testdata[,colSums(is.na(testdata)) == 0]
nzv <- nearZeroVar(traindata)
traindata <- traindata[,-nzv]
traindata <- traindata[,-(1:6)]
library(corrplot)
cor <- abs(cor(traindata[,-53]))
corrplot(cor)
cor08 <- findCorrelation(cor, cutoff=0.8)
traindata <- traindata[, -cor08]
set.seed(1234)
train  <- createDataPartition(traindata$classe, p=0.7, list=FALSE)
training <- traindata[train, ]
testing  <- traindata[-train, ]
table(training$classe)
library(randomForest)
modrf <- randomForest(classe ~ ., data=training)
